<!DOCTYPE html>
<html>

<head>
    <title>Interactive 3D Particles</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        canvas {
            display: block;
        }

        #gui {
            position: fixed;
            top: 10px;
            right: 10px;
            color: white;
        }
    </style>
</head>

<body>
    <!-- Include required libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dat.gui@0.7.7/build/dat.gui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

    <script>
        // Initialize scene
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Configuration
        const params = {
            particleCount: 5000,
            mouseForce: 3,
            color1: '#4a90e2',
            color2: '#ff2d75',
            size: 0.5
        };

        // Create particles
        let particles, positions, velocities;
        function createParticles() {
            const geometry = new THREE.BufferGeometry();
            positions = new Float32Array(params.particleCount * 3);
            velocities = new Float32Array(params.particleCount * 3);

            for (let i = 0; i < params.particleCount * 3; i += 3) {
                positions[i] = (Math.random() - 0.5) * 50;
                positions[i + 1] = (Math.random() - 0.5) * 50;
                positions[i + 2] = (Math.random() - 0.5) * 50;

                velocities[i] = (Math.random() - 0.5) * 0.1;
                velocities[i + 1] = (Math.random() - 0.5) * 0.1;
                velocities[i + 2] = (Math.random() - 0.5) * 0.1;
            }

            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            const material = new THREE.PointsMaterial({
                size: params.size,
                color: params.color1,
                blending: THREE.AdditiveBlending
            });

            particles = new THREE.Points(geometry, material);
            scene.add(particles);
        }

        // Setup camera
        camera.position.z = 50;

        // Add lighting
        const light = new THREE.PointLight(0xffffff, 100);
        light.position.set(10, 10, 10);
        scene.add(light);
        scene.add(new THREE.AmbientLight(0x404040));

        // GUI controls
        const gui = new dat.GUI();
        gui.add(params, 'mouseForce', 0, 10);
        gui.addColor(params, 'color1').onChange(() => {
            particles.material.color.set(params.color1);
        });
        gui.addColor(params, 'color2');
        gui.add(params, 'size', 0.1, 2).onChange(() => {
            particles.material.size = params.size;
        });

        // Mouse interaction
        const mouse = new THREE.Vector2();
        document.onmousemove = (e) => {
            mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
        };

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);

            const time = Date.now() * 0.001;
            const positions = particles.geometry.attributes.position.array;

            for (let i = 0; i < positions.length; i += 3) {
                // Mouse interaction
                const dx = positions[i] - mouse.x * 30;
                const dy = positions[i + 1] - mouse.y * 30;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < 15) {
                    const force = params.mouseForce / distance;
                    velocities[i] += dx * force * 0.1;
                    velocities[i + 1] += dy * force * 0.1;
                }

                // Update positions
                positions[i] += velocities[i];
                positions[i + 1] += velocities[i + 1];
                positions[i + 2] += velocities[i + 2];

                // Apply boundaries
                if (Math.abs(positions[i]) > 50) velocities[i] *= -0.5;
                if (Math.abs(positions[i + 1]) > 50) velocities[i + 1] *= -0.5;
                if (Math.abs(positions[i + 2]) > 50) velocities[i + 2] *= -0.5;
            }

            particles.geometry.attributes.position.needsUpdate = true;
            renderer.render(scene, camera);
        }

        // Initialize
        createParticles();
        animate();

        // Window resize handler
        window.onresize = () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        };

        // Add click effect
        document.onclick = () => {
            for (let i = 0; i < 300; i++) {
                const idx = Math.floor(Math.random() * params.particleCount) * 3;
                velocities[idx] += (Math.random() - 0.5) * 2;
                velocities[idx + 1] += (Math.random() - 0.5) * 2;
                velocities[idx + 2] += (Math.random() - 0.5) * 2;
            }
        };
    </script>
</body>

</html>